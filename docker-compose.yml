services:
  infokes_backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    container_name: infokes_backend
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/database?sslmode=disable
      TEST_DATABASE_URL: postgres://postgres:postgres@db:5432/database_test?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./packages/backend:/app
      - /app/node_modules
    networks:
      - infokes_network
  
  # infokes_frontend:
  #   build: 
  #     context: ./packages/frontend
  #     dockerfile: Dockerfile
  #   container_name: infokes_frontend
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - ./packages/frontend:/app
  #     - /app/node_modules
  #   networks:
  #     - infokes_network

  db:
    platform: linux/x86_64
    image: postgres:14.1-alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # POSTGRES_DB: database
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      # - db:/var/lib/postgresql/data
      # Load database schema from ./database.sql
      # If you want to reload new database schema, you need to execute
      # `docker-compose down --volumes` first to remove the volume.
      - ./database.sql:/docker-entrypoint-initdb.d/database.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - infokes_network
volumes:
  db:
    driver: local
networks:
  infokes_network:
    driver: bridge